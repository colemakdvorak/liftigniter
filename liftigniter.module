<?php
/**
 * @file Lift Igniter, recommendation service integration.
 */

define('LIFTIGNITER_DEFAULT_WIDGET', 'default-widget');
define('LIFTIGNITER_LIST_PREFIX',    'li-recommendation-');
define('LIFTIGNITER_TPL_PREFIX',     'liftigniter-');
define('LIFTIGNITER_TPL_EXT',        '.mst');

/**
 * Implements hook_menu().
 */
function liftigniter_menu() {
  return array(
    'admin/config/services/liftigniter' => array(
      'title' => 'Lift Igniter',
      'description' => 'Lift Igniter, recommendation integration',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('liftigniter_settings_form'),
      'access arguments' => array('administer site configuration'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'liftigniter.admin.inc',
    ),
  );
}


/**
 * Implements hook_permission().
 */
function liftigniter_permission() {
  return array(
    'view liftigniter blocks' => array(
      'title' => t('View Lift Igniter Blocks'),
      'description' => t('View the recommendations provided in Lift Igniter blocks.'),
    ),
  );
}


/**
 * Implements hook_library().
 */
function liftigniter_library() {
  return array('liftigniter' => array(
    'title' => 'Lift Igniter JS API',
    'version' => '1.0.0',
    'js' => array(
      libraries_get_path('liftigniter') . '/liftigniter.js' => array(
        'type' => 'file',
        'group' => JS_LIBRARY,
        'every_page' => TRUE,
      ),
    ),
  ));
}


/**
 * Implements hook_preproess_page().
 */
function liftigniter_preprocess_page(&$variables) {
  // if (module_exists('datalayer')) {
  //   drupal_add_html_head(array(
  //     '#type' => 'html_tag',
  //     '#tag' => 'script',
  //     '#value' => drupal_json_encode(datalayer_get_page_data()),
  //     '#attributes' => array(
  //       'type' => 'application/json',
  //       'id' => 'liftigniter-metadata',
  //     )), 'liftigniter_metadata'
  //   );
  // }
}


/**
 * Implements hook_block_info().
 */
function liftigniter_block_info() {
  $widgets = variable_get('liftigniter_blocks', array(LIFTIGNITER_DEFAULT_WIDGET));
  $blocks = array();

  foreach ($widgets as $delta) {
    $blocks['liftigniter_' . $delta] = array(
      'info' => t('Lift Igniter: ' . $delta),
      'cache' => DRUPAL_NO_CACHE,
    );
  }

  return $blocks;
}


/**
 * Implements hook_block_view().
 *
 * @param string $delta
 *
 * @return array
 */
function liftigniter_block_view($delta = '') {
  if (!user_access('view liftigniter blocks')) {
    return false;
  }

  // Keep a running list of all widget blocks being output on the page.
  $widgets = &drupal_static(__FUNCTION__, array());
  $widgets = $widgets + array($delta);

  // Place mustache template in the head.
  $template_output = array(
    '#type' => 'html_tag',
    '#tag' => 'script',
    '#value' => "\r\n" . liftigniter_get_template($delta),
    '#attributes' => array(
      'type' => 'application/mustache',
      'id' => LIFTIGNITER_LIST_PREFIX . $delta,
    ),
  );
  drupal_add_html_head($template_output, 'liftigniter_template_' . $delta);

  // Prepare settings.
  $settings = array('liftIgniter' => array(
    // @todo Per widget item number setting within block admin.
    'max' => variable_get('liftigniter_max_items', 5),
    'apiKey' => variable_get('liftigniter_api_key', ''),
    'widgets' => $widgets,
  ));

  // Return block render array for DOM placeholder and inject global settings.
  $block = array(
    'subject' => t('Recommended'),
    'content' => array(
      '#markup' => '<div id="li-recommendation-' . $delta . '"></div>',
      '#attached' => array(
        'js' => array(
          drupal_get_path('module', 'liftigniter') . '/liftigniter.js',
          array('type' => 'setting', 'data' => $settings),
          array('type' => 'inline', 'data' => _liftigniter_get_script()),
        ),
      ),
    ),
  );

  // Add base JS library, use CDN if not present yet.
  if (drupal_get_library('liftigniter')) {
    $block['#attached']['library'][] = 'liftigniter';
  }
  else {
    $block['#attached']['js'][] = '//cdn.petametrics.com/p.js';
  }

  return $block;
}


/**
 * Discover which template file to use.
 *
 * @return string
 *   Contents of template file.
 */
function liftigniter_get_template($delta) {
  // Check static or cached version. NOTE: Assignment test.
  $template = &drupal_static(__FUNCTION__ . $delta, FALSE);
  if (!$template && $template = cache_get('liftigniter_template_' . $delta, FALSE)) {
    return $template;
  }

  // Find and open the template file.
  global $theme;
  $theme_path = drupal_get_path('theme', $theme) . '/';
  $locations = array(
    $theme_path . 'templates/' . $delta,
    $theme_path . 'templates/liftigniter_default-widget',
    $theme_path . $delta,
    $theme_path . 'liftigniter_default-widget',
    drupal_get_path('module', 'liftigniter') . '/' . $delta,
    drupal_get_path('module', 'liftigniter') . '/liftigniter_default-widget',
  );
  // Allow inserting candidate template locations.
  drupal_alter('liftigniter_templates', $locations);

  // Test until found.
  foreach (array_unique($locations) as $path) {
    if (is_file($path . LIFTIGNITER_TPL_EXT)) {
      // File dirty work.
      ob_start();
      include $path . LIFTIGNITER_TPL_EXT;
      $template = ob_get_clean();
      // Stash and go.
      cache_set('liftigniter_template_' . $delta, $template);
      return $template;
    }
  }

  drupal_set_message(t('Lift Igniter template file missing: ') . $delta,'error');
  return FALSE;
}


/**
 * Return the embed code with key inserted.
 * @return [type] [description]
 */
function _liftigniter_get_script() {
  return "
    (function(w,d,s,p,v,e,r) {w['$petametrics_var']=v;w[v]=w[v]||function(){(w[v].q=w[v].q||[]).push(arguments)};w[v].l=1*new Date();e=d.createElement(s),r=d.getElementsByTagName(s)[0];e.async=1;e.src=p;r.parentNode.insertBefore(e,r)})(window,document,'script','//cdn.petametrics.com/p.js','$p');
    $p('init', '" . variable_get('liftigniter_api_key', '') ."');
    $p('send', 'pageview');
  ";
}
